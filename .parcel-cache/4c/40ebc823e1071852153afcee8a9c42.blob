"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadRecipe = exports.updateServings = exports.state = exports.loadSearchResult = exports.loadRecipe = exports.loadPagination = exports.deleteBookmark = exports.addBookmark = void 0;

var _regeneratorRuntime = require("regenerator-runtime");

var _helper = require("./helper");

var _config = require("./config");

// import { join } from 'core-js/core/array';
const state = {
  recipe: {},
  search: {
    query: '',
    recipes: [],
    page: 1,
    resultPerPage: _config.SHOW_PER_PAGE
  },
  bookmarks: []
};
exports.state = state;

const createRecipeObject = function (data) {
  let {
    recipe
  } = data.data;
  return {
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    sourceUrl: recipe.source_url,
    image: recipe.image_url,
    servings: recipe.servings,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients,
    ...(recipe.key && {
      key: recipe.key
    })
  };
};

const loadRecipe = async function (id) {
  try {
    const data = await (0, _helper.getJson)(`${_config.API_KEY}${id}`);
    state.recipe = createRecipeObject(data);
    if (state.bookmarks.some(bookmard => bookmard.id === id)) state.recipe.bookmarked = true;else state.recipe.bookmarked = false; // console.log(state.recipe);
  } catch (err) {
    throw err;
  }
};

exports.loadRecipe = loadRecipe;

const loadSearchResult = async function (query) {
  try {
    state.search.query = query;
    const data = await (0, _helper.getJson)(`${_config.API_KEY}?search=${state.search.query}`);
    state.search.recipes = data.data.recipes.map(res => {
      return {
        id: res.id,
        title: res.title,
        image: res.image_url,
        publisher: res.publisher
      };
    });
    state.search.page = 1;
  } catch (err) {
    throw err;
  }
};

exports.loadSearchResult = loadSearchResult;

const loadPagination = function () {
  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state.search.page;
  state.search.page = page;
  const start = (page - 1) * state.search.resultPerPage;
  const end = page * state.search.resultPerPage;
  return state.search.recipes.slice(start, end);
};

exports.loadPagination = loadPagination;

const updateServings = function (newServings) {
  state.recipe.ingredients.forEach(ing => ing.quantity = ing.quantity * newServings / state.recipe.servings);
  state.recipe.servings = newServings;
};

exports.updateServings = updateServings;

const presitBookmarkLocalStorage = function () {
  localStorage.setItem('bookmarks', JSON.stringify(state.bookmarks));
};

const addBookmark = function (recipe) {
  state.bookmarks.push(recipe);
  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
  presitBookmarkLocalStorage();
};

exports.addBookmark = addBookmark;

const deleteBookmark = function (id) {
  const index = state.bookmarks.findIndex(el => el.id === id);
  state.bookmarks.splice(index, 1);
  if (id === state.recipe.id) state.recipe.bookmarked = false;
  presitBookmarkLocalStorage();
};

exports.deleteBookmark = deleteBookmark;

const init = function () {
  const storage = localStorage.getItem('bookmarks');
  if (storage) state.bookmarks = JSON.parse(storage);
};

init();

const clearBookmarks = function () {
  localStorage.clear();
}; // clearBookmarks();


const uploadRecipe = async function (newRecipe) {
  try {
    const ingredients = Object.entries(newRecipe).filter(entry => entry[0].startsWith('ingredient') && entry[1] !== '').map(ing => {
      const ingArr = ing[1].replaceAll(' ', '').split(',');
      if (ingArr.length != 3) throw new Error('Wrong ingredients format! please use the correct forment :)');
      const [quantity, unit, description] = ingArr;
      return {
        quantity: quantity ? +quantity : null,
        unit,
        description
      };
    });
    const recipe = {
      title: newRecipe.title,
      source_url: newRecipe.sourceUrl,
      image_url: newRecipe.image,
      publisher: newRecipe.publisher,
      cooking_time: +newRecipe.cookingTime,
      servings: +newRecipe.servings,
      ingredients
    };
    console.log(recipe);
  } catch (err) {
    throw err;
  }
};

exports.uploadRecipe = uploadRecipe;