"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import { turn } from 'core-js/core/array';
class View {
  _data;

  renderMarkup(data) {
    let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (!data || Array.isArray(data) && data.length === 0) return this.renderErrorMessage();
    this._data = data;

    const markup = this._generateMarkup();

    if (!render) return markup;

    this._clear();

    this._parentEl.insertAdjacentHTML('afterbegin', markup);
  }

  updateMarkup(data) {
    this._data = data;

    const newMarkup = this._generateMarkup();

    const newDom = document.createRange().createContextualFragment(newMarkup);
    const newElement = Array.from(newDom.querySelectorAll('*'));
    const curElement = Array.from(this._parentEl.querySelectorAll('*')); // console.log(newElement)

    newElement.forEach((newEL, i) => {
      const curEl = curElement[i]; // console.log(curEl, newEL.isEqualNode(curEl))

      if (!newEL.isEqualNode(curEl) && newEL.firstChild.nodeValue.trim() !== '') {
        // console.log(newEL.firstChild.nodeValue.trim());
        curEl.textContent = newEL.textContent;
      }

      if (!newEL.isEqualNode(curEl)) {
        Array.from(newEL.attributes).forEach(attri => curEl.setAttribute(attri.name, attri.value));
      }
    });
  }

  renderSpinner() {
    this._parentEl.innerHTML = '';
    const sppiner = `
    <div class="spinner">
      <svg>
        <use href="${_icons.default}#icon-loader"></use>
      </svg>
    </div>
  `;

    this._parentEl.insertAdjacentHTML('afterbegin', sppiner);
  }

  renderErrorMessage() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._errorMessage;
    const markup = `
      <div class="error">
        <div>
          <svg>
            <use href="${_icons.default}#icon-alert-triangle"></use>
          </svg>
        </div>
        <p>${message}</p>
      </div>
    `;

    this._clear();

    this._parentEl.insertAdjacentHTML('afterbegin', markup);
  }

  renderMessage() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._message;
    const markup = `
      <div class="message">
        <div>
          <svg>
            <use href="${_icons.default}#icon-smile"></use>
          </svg>
        </div>
        <p>${message}</p>
      </div>
    `;

    this._clear();

    this._parentEl.insertAdjacentHTML('afterbegin', markup);
  }

  _clear() {
    this._parentEl.innerHTML = '';
  }

}

exports.default = View;